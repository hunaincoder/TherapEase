<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Urdu Speech Survey</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
      }
      textarea {
        width: 100%;
        height: 100px;
        margin: 10px 0;
      }
      button {
        padding: 10px 15px;
        background: #4caf50;
        color: white;
        border: none;
        cursor: pointer;
      }
      #status {
        color: #666;
        font-style: italic;
      }
    </style>
  </head>
  <body>
    <h1>Survey Question</h1>
    <p>How would you improve our service? (Answer in Urdu)</p>

    <textarea
      id="survey-answer"
      placeholder="Your answer will appear here in English..."
    ></textarea>
    <button id="start-speaking">ðŸŽ¤ Speak in Urdu</button>
    <p id="status">Press the microphone button and speak.</p>

    <script>
      const surveyInput = document.getElementById("survey-answer");
      const micButton = document.getElementById("start-speaking");
      const statusText = document.getElementById("status");

      micButton.addEventListener("click", async () => {
        try {
          statusText.textContent = "Listening... (Speak now in Urdu)";

          // Access microphone
          const stream = await navigator.mediaDevices.getUserMedia({
            audio: true,
          });
          const mediaRecorder = new MediaRecorder(stream, {
            mimeType: "audio/webm",
          });
          let audioChunks = [];

          mediaRecorder.ondataavailable = (e) => {
            if (e.data.size > 0) {
              audioChunks.push(e.data);
            }
          };

          mediaRecorder.onstop = async () => {
            statusText.textContent = "Processing...";

            // Send audio to backend
            const audioBlob = new Blob(audioChunks, { type: "audio/webm" });
            const formData = new FormData();
            formData.append("file", audioBlob, "recording.webm");

            const response = await fetch("http://localhost:8000/transcribe", {
              method: "POST",
              body: formData,
            });

            if (response.ok) {
              const { text } = await response.json();
              surveyInput.value = text; // Fill the answer box
              statusText.textContent = "Done!";
            } else {
              throw new Error("Transcription failed");
            }
          };

          // Start recording and stop after 10 seconds
          mediaRecorder.start();
          setTimeout(() => {
            mediaRecorder.stop();
            stream.getTracks().forEach((track) => track.stop()); // Close mic
          }, 10000); // Stop after 10 sec
        } catch (error) {
          statusText.textContent = `Error: ${error.message}`;
          console.error(error);
        }
      });
    </script>
  </body>
</html>
