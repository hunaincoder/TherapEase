<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Liebowitz Social Anxiety Scale</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      .result {
        margin-top: 2rem;
        padding: 1rem;
        border-radius: 0.5rem;
      }
      .mild {
        background-color: #fff8e1;
        border: 1px solid #ffc107;
      }
      .moderate {
        background-color: #ffe0b2;
        border: 1px solid #ff9800;
      }
      .severe {
        background-color: #ffebee;
        border: 1px solid #f44336;
      }
      .badge {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 9999px;
        font-weight: bold;
        color: white;
      }
      .badge-1 {
        background-color: #ffc107;
      }
      .badge-2 {
        background-color: #ff9800;
      }
      .badge-3 {
        background-color: #f44336;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 1rem;
      }
      th,
      td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: center;
      }
      th {
        background-color: #f2f2f2;
      }
    </style>
  </head>
  <body class="bg-gray-100 p-8">
    <div class="max-w-5xl mx-auto bg-white p-6 rounded-lg shadow-md">
      <h1 class="text-2xl font-bold mb-4">Liebowitz Social Anxiety Scale</h1>
      <p class="mb-4">
        For each situation, rate your <strong>Fear/Anxiety</strong> and
        <strong>Avoidance</strong> during the past week.
      </p>
      <p class="mb-4 font-semibold">
        <strong>Fear/Anxiety:</strong> 0 = None | 1 = Mild | 2 = Moderate | 3 =
        Severe<br />
        <strong>Avoidance:</strong> 0 = Never | 1 = Occasionally | 2 = Often | 3
        = Usually
      </p>

      <form id="lsasForm" onsubmit="event.preventDefault(); calculateScore()">
        <table id="questionsTable">
          <thead>
            <tr>
              <th>Situation</th>
              <th>Fear/Anxiety</th>
              <th>Avoidance</th>
            </tr>
          </thead>
          <tbody id="questionsContainer"></tbody>
        </table>
        <button
          type="submit"
          class="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          Submit
        </button>
      </form>

      <!-- Result Display Section -->
      <div id="result" class="result hidden">
        <p>Total Score: <span id="totalScore"></span></p>
        <p>Severity: <span id="severity"></span></p>
        <p>Badge: <span id="badge" class="badge"></span></p>
      </div>

      <script>
        const situations = [
          "Using a telephone in public",
          "Participating in a small group activity",
          "Eating in public",
          "Drinking with others",
          "Talking to someone in authority",
          "Acting, performing, or speaking in front of an audience",
          "Going to a party",
          "Working while being observed",
          "Writing while being observed",
          "Calling someone you don't know very well",
          "Talking face-to-face with someone you don't know very well",
          "Meeting strangers",
          "Urinating in a public bathroom",
          "Entering a room when others are already seated",
          "Being the center of attention",
          "Speaking up at a meeting",
          "Taking a test of your ability, skill, or knowledge",
          "Expressing disagreement or disapproval to someone you don't know very well",
          "Looking someone who you don't know very well straight in the eyes",
          "Giving a prepared oral talk to a group",
          "Trying to make someone's acquaintance for the purpose of a romantic/sexual relationship",
          "Returning goods to a store for a refund",
          "Giving a party",
          "Resisting a high-pressure salesperson",
        ];

        const scaleName = "<%= recommendedScale %>";

        function createQuestionForm() {
          const container = document.getElementById("questionsContainer");

          situations.forEach((situation, index) => {
            const row = document.createElement("tr");

            const situationCell = document.createElement("td");
            situationCell.textContent = `${index + 1}. ${situation}`;
            row.appendChild(situationCell);

            const fearCell = document.createElement("td");
            const fearGroup = document.createElement("div");
            fearGroup.className = "flex justify-center gap-2";

            for (let i = 0; i < 4; i++) {
              const label = document.createElement("label");
              label.className = "inline-flex items-center";

              const radio = document.createElement("input");
              radio.type = "radio";
              radio.name = `fear${index + 1}`;
              radio.value = i;
              radio.className = "mr-1";
              radio.required = true;

              label.appendChild(radio);
              label.appendChild(document.createTextNode(i));
              fearGroup.appendChild(label);
            }

            fearCell.appendChild(fearGroup);
            row.appendChild(fearCell);

            const avoidCell = document.createElement("td");
            const avoidGroup = document.createElement("div");
            avoidGroup.className = "flex justify-center gap-2";

            for (let i = 0; i < 4; i++) {
              const label = document.createElement("label");
              label.className = "inline-flex items-center";

              const radio = document.createElement("input");
              radio.type = "radio";
              radio.name = `avoid${index + 1}`;
              radio.value = i;
              radio.className = "mr-1";
              radio.required = true;

              label.appendChild(radio);
              label.appendChild(document.createTextNode(i));
              avoidGroup.appendChild(label);
            }

            avoidCell.appendChild(avoidGroup);
            row.appendChild(avoidCell);

            container.appendChild(row);
          });
        }

        async function calculateScore() {
          let fearScore = 0;
          let avoidanceScore = 0;

          for (let i = 1; i <= situations.length; i++) {
            const fearSelected = document.querySelector(
              `input[name="fear${i}"]:checked`
            );
            const avoidSelected = document.querySelector(
              `input[name="avoid${i}"]:checked`
            );

            if (!fearSelected || !avoidSelected) {
              alert(`Please answer all questions for situation ${i}`);
              return;
            }

            fearScore += parseInt(fearSelected.value);
            avoidanceScore += parseInt(avoidSelected.value);
          }

          const totalScore = fearScore + avoidanceScore;

          let severity;
          let severityClass;
          let badge;
          let badgeClass;

          if (totalScore <= 49) {
            severity = "Mild social anxiety";
            severityClass = "mild";
            badge = "1";
            badgeClass = "badge-1";
          } else if (totalScore >= 50 && totalScore <= 79) {
            severity = "Moderate social anxiety";
            severityClass = "moderate";
            badge = "2";
            badgeClass = "badge-2";
          } else {
            severity = "Severe social anxiety";
            severityClass = "severe";
            badge = "3";
            badgeClass = "badge-3";
          }

          const resultDiv = document.getElementById("result");
          document.getElementById("totalScore").textContent = totalScore;
          document.getElementById("severity").textContent = severity;
          const badgeSpan = document.getElementById("badge");
          badgeSpan.textContent = badge;
          badgeSpan.className = `badge ${badgeClass}`;
          resultDiv.className = `result ${severityClass} hidden`;
          setTimeout(() => {
            resultDiv.classList.remove("hidden");
          }, 10);

          try {
            const response = await fetch("/client/save-scale-results", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                scaleName: scaleName,
                totalScore,
                severity,
                badge,
              }),
            });

            const data = await response.json();

            if (!response.ok) {
              throw new Error(data.error || "Failed to save scale results");
            }

            window.location.href = data.redirect || "/client/patient-profile";
          } catch (error) {
            console.error("Error saving scale results:", error);
            alert(`Error: ${error.message}`);
            resultDiv.classList.add("hidden"); 
          }
        }

        createQuestionForm();
      </script>
    </div>
  </body>
</html>
