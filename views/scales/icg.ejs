<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Inventory of Complicated Grief (ICG)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      .result {
        margin-top: 2rem;
        padding: 1rem;
        border-radius: 0.5rem;
      }
      .mild {
        background-color: #fff8e1;
        border: 1px solid #ffc107;
      }
      .moderate {
        background-color: #ffe0b2;
        border: 1px solid #ff9800;
      }
      .severe {
        background-color: #ffebee;
        border: 1px solid #f44336;
      }
      .badge {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 9999px;
        font-weight: bold;
        color: white;
      }
      .badge-1 {
        background-color: #ffc107;
      }
      .badge-2 {
        background-color: #ff9800;
      }
      .badge-3 {
        background-color: #f44336;
      }
      .error-message {
        color: #f44336;
        margin-bottom: 1rem;
        font-weight: bold;
      }
    </style>
  </head>
  <body class="bg-gray-100 p-8">
    <div class="max-w-3xl mx-auto bg-white p-6 rounded-lg shadow-md">
      <h1 class="text-2xl font-bold mb-4">
        Inventory of Complicated Grief (ICG)
      </h1>
      <p class="mb-4">
        Please indicate how often you have experienced each of the following
        since the loss:
      </p>

      <form id="icgForm" onsubmit="event.preventDefault(); calculateScore()">
        <div id="questionsContainer" class="space-y-6"></div>
        <div class="flex space-x-4 mt-4">
          <button
            type="submit"
            class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            Submit
          </button>
        </div>
      </form>

      <div id="results" class="result hidden">
        <h2 class="text-xl font-semibold">Your Grief Assessment</h2>
        <p>
          <strong>Total Score:</strong> <span id="totalScore"></span> (out of
          76)
        </p>
        <p><strong>Severity:</strong> <span id="severity"></span></p>
        <p><strong>Badge:</strong> <span id="badge"></span></p>
      </div>
    </div>

    <script>
      const questions = [
        "I think about this person so much that it's hard for me to do the things I normally do",
        "Memories of the person who died upset me",
        "I cannot accept the death of the person who died",
        "I feel myself longing for the person who died",
        "I feel drawn to places and things associated with the person who died",
        "I can't help feeling angry about his/her death",
        "I feel disbelief over what happened",
        "I feel stunned or dazed over what happened",
        "Ever since s/he died it is hard for me to trust people",
        "Ever since s/he died I feel like I have lost the ability to care about other people or I feel distant from people I care about",
        "I have pain in the same area of my body or I have some of the same symptoms as the person who died",
        "I go out of my way to avoid reminders of the person who died",
        "I feel that life is empty without the person who died",
        "I hear the voice of the person who died speak to me",
        "I see the person who died stand before me",
        "I feel that it is unfair that I should live when this person died",
        "I feel bitter over this person's death",
        "I feel envious of others who have not lost someone close",
        "I feel lonely a great deal of the time ever since s/he died",
      ];

      const scaleName = "<%= recommendedScale %>";

      function createQuestionForm() {
        const container = document.getElementById("questionsContainer");

        questions.forEach((question, index) => {
          const questionDiv = document.createElement("div");
          questionDiv.className = "question";

          const questionText = document.createElement("p");
          questionText.className = "font-medium mb-2";
          questionText.textContent = `${index + 1}. ${question}`;
          questionDiv.appendChild(questionText);

          const radioGroup = document.createElement("div");
          radioGroup.className = "radio-group flex gap-4 flex-wrap";

          const options = [
            "Never (0)",
            "Rarely (1)",
            "Sometimes (2)",
            "Often (3)",
            "Always (4)",
          ];

          options.forEach((option, i) => {
            const label = document.createElement("label");
            label.className = "inline-flex items-center";
            label.htmlFor = `q${index + 1}_${i}`;

            const radio = document.createElement("input");
            radio.type = "radio";
            radio.name = `q${index + 1}`;
            radio.id = `q${index + 1}_${i}`;
            radio.value = i;
            radio.className = "mr-1";
            radio.required = true;
            radio.setAttribute("aria-label", `${question} - ${option}`);

            label.appendChild(radio);
            label.appendChild(document.createTextNode(option));
            radioGroup.appendChild(label);
          });

          questionDiv.appendChild(radioGroup);
          container.appendChild(questionDiv);
        });
      }

      async function calculateScore() {
        let totalScore = 0;

        for (let i = 1; i <= questions.length; i++) {
          const selected = document.querySelector(
            `input[name="q${i}"]:checked`
          );
          if (!selected) {
            showError(`Please answer question ${i}`);
            return;
          }
          totalScore += parseInt(selected.value);
        }

        let severity, severityClass, badge, badgeClass;

        if (totalScore <= 30) {
          severity = "Mild grief symptoms";
          severityClass = "mild";
          badge = "1";
          badgeClass = "badge-1";
        } else if (totalScore <= 50) {
          severity = "Moderate grief symptoms";
          severityClass = "moderate";
          badge = "2";
          badgeClass = "badge-2";
        } else {
          severity = "Severe grief symptoms";
          severityClass = "severe";
          badge = "3";
          badgeClass = "badge-3";
        }

        const resultsDiv = document.getElementById("results");
        resultsDiv.className = `result ${severityClass}`;
        document.getElementById("totalScore").textContent = totalScore;
        document.getElementById("severity").textContent = severity;
        document.getElementById("badge").textContent = badge;
        document.getElementById("badge").className = `badge ${badgeClass}`;

        try {
          const response = await fetch("/client/save-scale-results", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              scaleName: scaleName,
              totalScore,
              severity,
              badge,
            }),
          });

          const data = await response.json();

          if (!response.ok) {
            throw new Error(data.error || "Failed to save scale results");
          }

          window.location.href = data.redirect || "/client/patient-profile";
        } catch (error) {
          console.error("Error saving scale results:", error);
          alert(`Error: ${error.message}`);
        }
      }

      function showError(message) {
        const existingError = document.querySelector(".error-message");
        if (existingError) existingError.remove();

        const errorDiv = document.createElement("div");
        errorDiv.className = "error-message";
        errorDiv.textContent = message;
        document.getElementById("icgForm").prepend(errorDiv);
        setTimeout(() => errorDiv.remove(), 5000);
      }

      createQuestionForm();
    </script>
  </body>
</html>
